set nocompatible              " be iMproved, required
set ff=unix
set encoding=utf-8
filetype off                  " required
" ++++++++++++++++++++ force specific python3 executable +++++++++++++++++++++
" if has('nvim') && has('win32')
"   let g:python3_host_prog = $USERPROFILE.'/bin/python.org/3.10/python.exe'
" elseif has('nvim') && has('linux')
"   let g:python3_host_prog = '/opt/python/3.8/bin/python'
" endif
" ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"
" if !has('nvim')
"    py3 import sys; import pathlib; import os; sys.path.insert(0, str(pathlib.Path(os.environ['VIMPYTHON']).parent / 'lib/site-packages'))
" endif
set fileencoding=utf-8
set viminfo=""
if has('win32')
  set viewdir=~/vimfiles/view
else
  set viewdir=~/.vim/view
endif
set ignorecase
set smartcase
set wildmode=full
set wildmenu

" set the python3 location
" set pythonthreehome=~/bin/python.org/3.9
" set pythonthreedll=~/bin/python.org/3.9/python39.dll
" set the runtime path to include Vundle and initialize
"
" ++++++++++++++++++++++ force specific python3 dll ++++++++++++++++++++++++++
" if !has('nvim') && has('win32')
"     "set pythonthreehome=C:\\Users\\hchen1\\bin\\python.org\\3.9
"     "set pythonthreedll=C:\\Users\\hchen1\\bin\\python.org\\3.9\\python39.dll
"     let &pythonthreedll = $USERPROFILE.'/bin/python.org/3.9/python39.dll'
" endif
" ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
set smarttab
set expandtab
set incsearch
set shiftwidth=4
set ts=4
set sts=4
set number
set numberwidth=5
let $GIT_SSL_NO_VERIFY = 'true'
set showtabline=2
set laststatus=2
set rtp^=~/.vim
set rtp+=~/.vim/after

" -------------------------------------------------------------------
" vim plug for plugins management
" -------------------------------------------------------------------

call plug#begin('~/.vim/vimplug-plugs')
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'NLKNguyen/papercolor-theme'
    " Plug 'SirVer/ultisnips'
    if !has('nvim')
        Plug 'roxma/nvim-yarp'
        Plug 'roxma/vim-hug-neovim-rpc'
    endif
    Plug 'tpope/vim-surround'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'sheerun/vim-polyglot'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'jiangmiao/auto-pairs'
    Plug 'webdevel/tabulous'
    Plug 'honza/vim-snippets'
call plug#end()


" ------------------------------
" other setting
" ------------------------------
filetype plugin on
filetype indent on
syntax enable
syntax on
"let g:deoplete#enable_at_startup = 1
set backspace=indent,eol,start
"set preserveindent
set copyindent
"set nohlsearch
set nobackup
set showmatch
set wrap
set splitbelow
set splitright
if has('gui_running')
  "set guifont=Lucida_Console:h10
  "set guifont=Monaco:h10
  if has('win32')
    set guifont=Consolas:h8.9
  endif
  if has('macunix')
    set guifont=Consolas:h14
  endif
  set guioptions-=e   " needed for tabline
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
  set lines=48
  set columns=160
endif

" setting terminal colors
if !has('nvim') && has('linux')
    if exists('+termguicolors')
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        set termguicolors
    endif
else
    set termguicolors
endif

" ---------------------------------------------------------
"  set airline theme as well as colorscheme
" ---------------------------------------------------------
let g:python_highlight_all = 1
let g:airline_section_c='[FILENAME=%{strcharpart(expand("%:t"), 0, 12)}] [DEC=%b] [HEX=%B] [LINE=%.5l] [COL=%.5v]'
let g:airline_theme='papercolor'
let g:PaperColor_Theme_Options = {
    \   'language': {
    \       'python': {
    \           'highlight_builtins': 1
    \       }
    \   }
    \ }

set background=dark
silent! colorscheme PaperColor

au BufWinEnter * silent! loadview | silent! exe "normal zR"
au BufWinLeave * silent! mkview!
" maximize windows in GUI
" au GUIEnter * simalt ~x

" finalize vim setting, vim has already loaded all packages at this time
"au VimEnter * source ~/.vim/myvim_settings.vim
source ~/.vim/myvim_settings.vim
source ~/.vim/myvim_filetype.vim

" ---------------------------------
"  python language server
" ---------------------------------
if executable('pyls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

" -------------------------------
" change coc-setting
" -------------------------------
let g:coc_global_extensions=[ 'coc-powershell', 'coc-pyright', 'coc-json', 'coc-vimlsp', 'coc-snippets' , 'coc-tsserver']
let g:myvim_use_dein=0
source ~/.vim/myvim_mylib.vim
call myvim_mylib#SetCocPythonPath()
call myvim_mylib#SetCocPowerShellExe()


" -------------------------------
" keymapping and function mapping
" -------------------------------
" source ~/.vim/myvim_keymap.vim

let g:AutoPairsMapCh=1
let g:AutoPairsShortcutFastWrap=''
let g:AutoPairsMapSpace=1


inoremap <buffer> <silent> <c-x>apf <C-R>=AutoPairsFastWrap()<CR>
nnoremap <buffer> <silent> <c-x>apt :call AutoPairsToggle()<CR>
inoremap <buffer> <silent> <C-x>apt <C-R>=AutoPairsToggle()<CR>

" -------------------------------
"  coc.nvim settings
" -------------------------------
"
"
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=500

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
